#!/usr/bin/python
import os.path
import argparse

DEFAULT_UARCH_DIR = "/home/check/pipeproof_tutorial/uarches/"
DEFAULT_PC_DIR = "/home/check/pipeproof_tutorial/src/"

parser = argparse.ArgumentParser()
parser.add_argument('-m', '--microarch', required=True, help="The microarchitecture description against which to check the litmus test")
parser.add_argument('-i', '--isa-mcm', required=True, help="The ISA-level MCM to check the microarchitecture against (one of \"SC\" or \"TSO\")")
parser.add_argument('-v', '--verbose', type=int, default=0, help="The verbosity level of output to be generated (levels 0-7)")
parser.add_argument('-d', '--microarch-dir', default=DEFAULT_UARCH_DIR, help="The directory in which to find the microarchitecture (if different from %s)" % DEFAULT_UARCH_DIR)
parser.add_argument('-p', '--pipeproof-dir', default=DEFAULT_PC_DIR, help="The directory in which to find the pipeproof binary (if different from %s)" % DEFAULT_PC_DIR)
parser.add_argument('-r', '--raw-output', default=False, help="Don't filter PipeProof output (default false)", action="store_true")
parser.add_argument('-n', '--no-chain-invariants', default=False, help="Don't use chain invariants (default false)", action="store_true")

args = parser.parse_args()

regular_flags = ""

if args.no_chain_invariants:
    regular_flags = "-s 1 -f 2 -c 5 -n"
else:
    regular_flags = "-s 1 -f 2 -c 5"

cmds = []
if args.raw_output:
    cmds.append("%s/pipeproof %s -l %s -v %d -m %s/%s" % (args.pipeproof_dir, regular_flags, args.isa_mcm, args.verbose, args.microarch_dir, args.microarch))
else:
    cmds.append("%s/pipeproof %s -l %s -v %d -m %s/%s | grep \"\\(STATUS\\|Checking Path\\)\"" % (args.pipeproof_dir, regular_flags, args.isa_mcm, args.verbose, args.microarch_dir, args.microarch))

for cmd in cmds:
    print cmd
    os.system(cmd)
